// <auto-generated />
using System;
using MangaUpdater.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MangaUpdater.Database.Migrations
{
    [DbContext(typeof(AppDbContextIdentity))]
    [Migration("20240812153600_Initial-Seed")]
    partial class InitialSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MangaUpdater.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .IsUnicode(false)
                        .HasColumnType("varchar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MangaUpdater.Entities.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MangaId")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MangaId", "SourceId", "Number")
                        .IsUnique();

                    b.HasIndex(new[] { "MangaId", "SourceId", "Number" }, "IX_Chapters_MangaId_SourceId_Number")
                        .IsUnique();

                    b.HasIndex(new[] { "SourceId" }, "IX_Chapters_SourceId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("MangaUpdater.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Racing"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Avant Garde"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Mythology"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ecchi"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Strategy Game"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Hentai"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Kids"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Martial Arts"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Mecha"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Parody"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Samurai"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 23,
                            Name = "School"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Shoujo"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Girls Love"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Shounen"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Boys Love"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Space"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Super Power"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Vampire"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Harem"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Slice of Life"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Supernatural"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Military"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Detective"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Psychological"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Seinen"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Josei"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Crossdressing"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Suspense"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Award Winning"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Gourmet"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Workplace"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Erotica"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Adult Cast"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Anthropomorphic"
                        },
                        new
                        {
                            Id = 52,
                            Name = "CGDCT"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Childcare"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Combat Sports"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Delinquents"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Educational"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Gag Humor"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Gore"
                        },
                        new
                        {
                            Id = 59,
                            Name = "High Stakes Game"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Idols (Female)"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Idols (Male)"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Isekai"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Iyashikei"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Love Polygon"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Magical Sex Shift"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Mahou Shoujo"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Medical"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Memoir"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Organized Crime"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Otaku Culture"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Performing Arts"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Pets"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Reincarnation"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Reverse Harem"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Romantic Subtext"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Showbiz"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Survival"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Team Sports"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Time Travel"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Video Game"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Villainess"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Visual Arts"
                        });
                });

            modelBuilder.Entity("MangaUpdater.Entities.Manga", b =>
                {
                    b.Property<int>("MyAnimeListId")
                        .HasColumnType("integer");

                    b.Property<string>("CoverUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("MyAnimeListId");

                    b.ToTable("Mangas");
                });

            modelBuilder.Entity("MangaUpdater.Entities.MangaAuthor", b =>
                {
                    b.Property<int>("MangaId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("MangaId", "Name");

                    b.ToTable("MangaAuthors");
                });

            modelBuilder.Entity("MangaUpdater.Entities.MangaGenre", b =>
                {
                    b.Property<int>("MangaId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("MangaId", "GenreId");

                    b.HasIndex(new[] { "GenreId" }, "IX_MangaGenres_GenreId");

                    b.ToTable("MangaGenres");
                });

            modelBuilder.Entity("MangaUpdater.Entities.MangaSource", b =>
                {
                    b.Property<int>("MangaId")
                        .HasColumnType("integer");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("MangaId", "SourceId");

                    b.HasIndex(new[] { "SourceId" }, "IX_MangaSources_SourceId");

                    b.ToTable("MangaSources");
                });

            modelBuilder.Entity("MangaUpdater.Entities.MangaTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAsuraMainTitle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMyAnimeListMainTitle")
                        .HasColumnType("boolean");

                    b.Property<int>("MangaId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("MangaId", "IsMyAnimeListMainTitle")
                        .IsUnique()
                        .HasFilter("\"IsMyAnimeListMainTitle\" = TRUE");

                    b.ToTable("MangaTitles");
                });

            modelBuilder.Entity("MangaUpdater.Entities.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Sources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseUrl = "https://api.mangadex.org/manga/",
                            Name = "MangaDex"
                        },
                        new
                        {
                            Id = 2,
                            BaseUrl = "https://asuracomic.net/series/",
                            Name = "AsuraScans"
                        });
                });

            modelBuilder.Entity("MangaUpdater.Entities.UserChapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("integer");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<int>("UserMangaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserMangaId", "SourceId")
                        .IsUnique();

                    b.HasIndex(new[] { "ChapterId" }, "IX_UserChapters_ChapterId");

                    b.HasIndex(new[] { "SourceId" }, "IX_UserChapters_SourceId");

                    b.HasIndex(new[] { "UserMangaId", "SourceId" }, "IX_UserChapters_UserMangaId_SourceId")
                        .IsUnique();

                    b.ToTable("UserChapters");
                });

            modelBuilder.Entity("MangaUpdater.Entities.UserManga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MangaId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("MangaId", "UserId")
                        .IsUnique();

                    b.HasIndex(new[] { "MangaId", "UserId" }, "IX_UserMangas_MangaId_UserId")
                        .IsUnique();

                    b.ToTable("UserMangas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MangaUpdater.Entities.Chapter", b =>
                {
                    b.HasOne("MangaUpdater.Entities.Manga", "Manga")
                        .WithMany("Chapters")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaUpdater.Entities.Source", "Source")
                        .WithMany("Chapters")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("MangaUpdater.Entities.MangaAuthor", b =>
                {
                    b.HasOne("MangaUpdater.Entities.Manga", "Manga")
                        .WithMany("MangaAuthors")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("MangaUpdater.Entities.MangaGenre", b =>
                {
                    b.HasOne("MangaUpdater.Entities.Genre", "Genre")
                        .WithMany("MangaGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaUpdater.Entities.Manga", "Manga")
                        .WithMany("MangaGenres")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("MangaUpdater.Entities.MangaSource", b =>
                {
                    b.HasOne("MangaUpdater.Entities.Manga", "Manga")
                        .WithMany("MangaSources")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaUpdater.Entities.Source", "Source")
                        .WithMany("MangaSources")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("MangaUpdater.Entities.MangaTitle", b =>
                {
                    b.HasOne("MangaUpdater.Entities.Manga", "Manga")
                        .WithMany("MangaTitles")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("MangaUpdater.Entities.UserChapter", b =>
                {
                    b.HasOne("MangaUpdater.Entities.Chapter", "Chapter")
                        .WithMany("UserChapters")
                        .HasForeignKey("ChapterId");

                    b.HasOne("MangaUpdater.Entities.Source", "Source")
                        .WithMany("UserChapters")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaUpdater.Entities.UserManga", "UserManga")
                        .WithMany("UserChapters")
                        .HasForeignKey("UserMangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Source");

                    b.Navigation("UserManga");
                });

            modelBuilder.Entity("MangaUpdater.Entities.UserManga", b =>
                {
                    b.HasOne("MangaUpdater.Entities.Manga", "Manga")
                        .WithMany("UserMangas")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MangaUpdater.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MangaUpdater.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaUpdater.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MangaUpdater.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangaUpdater.Entities.Chapter", b =>
                {
                    b.Navigation("UserChapters");
                });

            modelBuilder.Entity("MangaUpdater.Entities.Genre", b =>
                {
                    b.Navigation("MangaGenres");
                });

            modelBuilder.Entity("MangaUpdater.Entities.Manga", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("MangaAuthors");

                    b.Navigation("MangaGenres");

                    b.Navigation("MangaSources");

                    b.Navigation("MangaTitles");

                    b.Navigation("UserMangas");
                });

            modelBuilder.Entity("MangaUpdater.Entities.Source", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("MangaSources");

                    b.Navigation("UserChapters");
                });

            modelBuilder.Entity("MangaUpdater.Entities.UserManga", b =>
                {
                    b.Navigation("UserChapters");
                });
#pragma warning restore 612, 618
        }
    }
}
